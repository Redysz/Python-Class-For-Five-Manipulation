from five import Five
import unittest


class TestStringMethods(unittest.TestCase):
    def setUp(self):
        self.five = Five()

    def test_operations_on_five(self):
        self.assertEqual(5 * 3, self.five * 3)
        self.assertEqual(3 * 5, 3 * self.five)
        self.assertEqual(5 + 3, self.five + 3)
        self.assertEqual(3 + 5, 3 + self.five)
        self.assertEqual(5 - 3, self.five - 3)
        self.assertEqual(3 - 5, 3 - self.five)
        self.assertEqual(5 / 3, self.five / 3)
        self.assertEqual(3 / 5, 3 / self.five)
        self.assertEqual(5 // 3, self.five // 3)
        self.assertEqual(3 // 5, 3 // self.five)
        self.assertEqual(5 ** 3, self.five ** 3)
        self.assertEqual(3 ** 5, 3 ** self.five)
        self.assertEqual(5 << 3, self.five << 3)
        self.assertEqual(5 >> 3, self.five >> 3)
        self.assertEqual(-5, -self.five)
        self.assertEqual(+5, +self.five)
        self.assertEqual(abs(5), abs(self.five))
        self.assertEqual(~5, ~self.five)
        self.assertEqual(complex(5), complex(self.five))
        self.assertEqual(5 < 3, self.five < 3)
        self.assertEqual(5 <= 3, self.five <= 3)
        self.assertEqual(5 == 3, self.five == 3)
        self.assertEqual(5 != 3, self.five != 3)
        self.assertEqual(5 >= 3, self.five >= 3)
        self.assertEqual(5 > 3, self.five > 3)
        self.assertEqual(self.five.say_five_in_language('Polish'), 'piÄ™Ä‡')
        self.assertEqual(self.five.say_five_times('ðŸ˜Š'), 'ðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜Š')
        self.assertEqual(self.five.say_five_times('ðŸ˜¹'), 'ðŸ˜¹ðŸ˜¹ðŸ˜¹ðŸ˜¹ðŸ˜¹')
        self.assertEqual(self.five.say_five_times('vodka'), 'vodkavodkavodkavodkavodka')
        self.assertEqual(self.five.get_five_in_digit_type('vodka'), '5')
        self.assertEqual(self.five.get_five_in_digit_type('European'), '5')
        self.assertEqual(self.five.get_five_in_digit_type('Arabic'), 'Ù¥')
        self.assertEqual(self.five.get_five_in_digit_type('Arabic-west'), 'Ûµ')
        self.assertEqual(True, self.five.is_divisor(25))
        self.assertEqual(True, self.five.is_divisor(0))
        self.assertEqual(True, self.five.is_divisor(5))
        self.assertEqual(True, self.five.is_divisor(-50))
        self.assertEqual(False, self.five.is_divisor(22))
